// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios13.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name NoiseTagging
import AVFoundation
import AudioToolbox
import CloudKit
import CoreGraphics
import Foundation
import MetalKit
import Network
@_exported import NoiseTagging
import Swift
import UIKit
public protocol ItemOfArrayInMenu {
  var displayName: Swift.String { get }
  func isEqual(_ object: Any?) -> Swift.Bool
}
extension String : NoiseTagging.ItemOfArrayInMenu {
  public var displayName: Swift.String {
    get
  }
  public func isEqual(_ object: Any?) -> Swift.Bool
}
extension Int : NoiseTagging.ItemOfArrayInMenu {
  public var displayName: Swift.String {
    get
  }
  public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers public class ItemOfArraySetting : NoiseTagging.Setting_abstract, NoiseTagging.Setting {
  final public let indexInitialValue: Swift.Int
  public var indexValue: Swift.Int {
    get
    set
  }
  final public let initialValue: NoiseTagging.ItemOfArrayInMenu
  public var value: NoiseTagging.ItemOfArrayInMenu {
    get
  }
  public init(title: Swift.String, possibleValues: [NoiseTagging.ItemOfArrayInMenu], indexValue: Swift.Int, usePickerInsteadOfSegmentedControl: Swift.Bool = false, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  public func indexFor(value: NoiseTagging.ItemOfArrayInMenu) -> Swift.Int?
  public var numberOfPossibleValues: Swift.Int {
    get
  }
  public func possibleValueAt(index: Swift.Int) -> NoiseTagging.ItemOfArrayInMenu
  public func select(value: NoiseTagging.ItemOfArrayInMenu)
  public func selectValueWith(displayName: Swift.String) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var descriptionValueIfDefined: Swift.String {
    @objc get
  }
  @objc public func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc public var valueEqualsDefaultValue: Swift.Bool {
    @objc get
  }
  @objc public func resetToDefault()
  @objc public var cellNibName: Swift.String {
    @objc get
  }
  @objc public var cellReuseIdentifier: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum NoiseTagMode : Swift.Int, NoiseTagging.EnumAsSetting {
  case TrainGeneric
  case TrainSimple
  case TrainCustom
  case Test
  case Verify
  case ElectrodeQuality
  case SignalQuality
  case DataCollection
  case ZeroTrain
  public var displayName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SettingsTableViewController : UIKit.UITableViewController, NoiseTagging.SettingObserver {
  public static func newViewControllerForEditing(setsOfSettings: [NoiseTagging.SetOfSettings]) -> NoiseTagging.SettingsTableViewController
  @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc public func valueChangedFor(setting: NoiseTagging.Setting)
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct NoiseTagSettingTitles {
  public static let mode: Swift.String
  public static let useMetal: Swift.String
  public static let certaintyRequiredForPress: Swift.String
  public static let disableNoClicks: Swift.String
  public static let clickFeedbackMode: Swift.String
  public static let noiseTaggingPrintsToTheConsole: Swift.String
  public static let showNoiseTagIDsOnControls: Swift.String
  public static let soundOnMissedFrame: Swift.String
  public static let leftCornerView: Swift.String
  public static let leftCornerViewIndexOfNoiseTag: Swift.String
  public static let rightCornerView: Swift.String
  public static let rightCornerViewIndexOfNoiseTag: Swift.String
  public static let framesPerBit: Swift.String
  public static let preferredNFramesPerSecond: Swift.String
  public static let filenameNoiseTags: Swift.String
  public static let assignNoiseTagsInReversedOrder: Swift.String
  public static let randomlyTranslateNoiseTagsInTraining: Swift.String
  public static let timeInBetweenTrials: Swift.String
  public static let nSimpleTrainTrials: Swift.String
  public static let trialDurationSimpleTrain: Swift.String
  public static let nGenericTrainTrials: Swift.String
  public static let trialDurationGenericTrain: Swift.String
  public static let minTrialDuration: Swift.String
  public static let maxTestTrialDuration: Swift.String
  public static let disableMaxTestTrialDuration: Swift.String
  public static let certaintyRequiredForFirstZeroTrainClick: Swift.String
  public static let maxDurationFirstZeroTrainClick: Swift.String
  public static let nZeroTrainTrials: Swift.String
  public static let voice: Swift.String
  public static let speechRate: Swift.String
  public static let autoDiscoverHostAddressUsingSSDP: Swift.String
  public static let hostAddressTCP: Swift.String
  public static let portTCP: Swift.String
  public static let autoConnectTCP: Swift.String
  public static let timeoutConnectingOverTCP: Swift.String
  public static let timeInBetweenAttemptsToConnect: Swift.String
  public static let durationAutoConnectTCPBeforeWarningUser: Swift.String
  public static let contrastMode: Swift.String
  public static let defaultBackgroundColorPrimary: Swift.String
  public static let defaultBackgroundColorTopAndBottomBars: Swift.String
  public static let defaultBackgroundColorTreeNavigation: Swift.String
  public static let defaultColorButtonEnabled: Swift.String
  public static let defaultColorButtonDisabled: Swift.String
  public static let defaultColorItemsOnPrimaryBackground: Swift.String
  public static let defaultColorItemsOnTopAndBottomBars: Swift.String
  public static let defaultColorItemsInTreeNavigation: Swift.String
  public static let colorButtonNotPressedFeedback: Swift.String
  public static let defaultColorItemsOnButtons: Swift.String
  public static let colorBitOffIfMaxContrast: Swift.String
  public static let colorBitOnIfMaxContrast: Swift.String
  public static let clickSoundOnPress: Swift.String
  public static let enableOtherSounds: Swift.String
  public static let soundAlarmWhenDisconnecting: Swift.String
  public static let playSoundAfterNoiseTaggingOn: Swift.String
  public static let intervalPlaySoundAfterNoiseTaggingOn: Swift.String
  public static let doubleTapOpensBrainSetup: Swift.String
  public static let twoFingerDoubleTapOpensDeveloperScreen: Swift.String
  public static let useTapsForTogglingWhetherControlsParticipateInNoiseTagging: Swift.String
  public static let hideNonTargetControls: Swift.String
  public static let labeledButtonsOnlyPartlyFlicker: Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NoiseTagSetOfSettings : NoiseTagging.SetOfSettings {
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc public enum NoiseTagControlAppearance : Swift.Int {
  case Flicker0
  case Flicker1
  case Enabled
  case Disabled
  case Other
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NoiseTagRadioButton : NoiseTagging.NoiseTagLabeledButtonView {
  public var isOn: Swift.Bool {
    get
    set
  }
  @objc deinit
  override public init(frame: CoreGraphics.CGRect, locationLabel: NoiseTagging.NoiseTagLabeledButtonView.LocationLabel = super)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public enum ScalingUI {
  public static func scale(view: UIKit.UIView, withScaleX scaleX: CoreGraphics.CGFloat, scaleY: CoreGraphics.CGFloat, scaleR scaleROrNil: CoreGraphics.CGFloat? = nil)
  public enum FromRegularIPad {
    public static let scaleX: CoreGraphics.CGFloat
    public static let scaleY: CoreGraphics.CGFloat
    public static let scaleR: CoreGraphics.CGFloat
    public static func scale(view: UIKit.UIView)
    public static func scale(image: UIKit.UIImage?) -> UIKit.UIImage?
  }
  public enum From12inch9 {
    public static let scaleX: CoreGraphics.CGFloat
    public static let scaleY: CoreGraphics.CGFloat
    public static let scaleR: CoreGraphics.CGFloat
    public static func scale(view: UIKit.UIView)
    public static func scale(image: UIKit.UIImage?) -> UIKit.UIImage?
  }
}
@objc @_inheritsConvenienceInitializers public class SoundsHelper : ObjectiveC.NSObject, AVFoundation.AVAudioPlayerDelegate {
  public func play(filename: Swift.String, fileExtension: Swift.String = "wav")
  public func play(url: Foundation.URL)
  @objc public func audioPlayerDidFinishPlaying(_ player: AVFoundation.AVAudioPlayer, successfully flag: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
public let Sound: NoiseTagging.SoundsHelper
@objc @_hasMissingDesignatedInitializers public class SyncableDatabase : ObjectiveC.NSObject {
  public var viewControllerForPresentingAlerts: UIKit.UIViewController?
  @objc deinit
  @objc override dynamic public init()
}
extension UIViewController {
  public var viewIsInCurrentNoiseTaggingUnit: Swift.Bool {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class IntSetting : NoiseTagging.Setting_abstract, NoiseTagging.Setting, Foundation.NSCoding {
  final public let initialValue: Swift.Int
  public var value: Swift.Int {
    get
    set
  }
  public init(title: Swift.String, value: Swift.Int, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var descriptionValueIfDefined: Swift.String {
    @objc get
  }
  @objc public var valueAsJson: Any {
    @objc get
  }
  @objc public func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc public var valueEqualsDefaultValue: Swift.Bool {
    @objc get
  }
  @objc public func resetToDefault()
  @objc public var cellNibName: Swift.String {
    @objc get
  }
  @objc public var cellReuseIdentifier: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class NoiseTagPopupItem : ObjectiveC.NSObject {
  final public let title: Swift.String
  public var subTitle: Swift.String?
  final public let image: UIKit.UIImage?
  public var associatedValue: Any?
  public init(title: Swift.String, image: UIKit.UIImage? = nil, associatedValue: Any? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension NoiseTagController {
  public var mode: NoiseTagging.NoiseTagMode {
    get
  }
  @objc dynamic public class func nFramesPerBit() -> Swift.Int
}
extension UIView : NoiseTagging.NoiseTagControl {
  @objc dynamic public var isHiddenOrIsInHiddenView: Swift.Bool {
    @objc get
  }
  @objc dynamic open func show(appearance: NoiseTagging.NoiseTagControlAppearance, withDefaultColor defaultColor: UIKit.UIColor)
  @objc dynamic open func setFeedbackColor(color: UIKit.UIColor?)
  @objc dynamic open func layerToHandleNoiseTagTaps() -> QuartzCore.CALayer?
  @objc dynamic open func layerFlickeringPart() -> QuartzCore.CALayer
  @objc dynamic open func layerForFeedbackAnimations() -> QuartzCore.CALayer
  @objc dynamic public func noiseTagControlIsEnabled_didChangeValue()
  @objc dynamic public func updateUIDependingOnNoiseTagging()
}
public protocol PageDelegate {
  func pageRequestsTitleBarToBe(hidden: Swift.Bool)
}
@objc public class Page : ObjectiveC.NSObject {
  public enum Kind {
    case View
    case List
    case Settings
    public static func == (a: NoiseTagging.Page.Kind, b: NoiseTagging.Page.Kind) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var pageDelegate: NoiseTagging.PageDelegate?
  final public let title: Swift.String
  final public let kind: NoiseTagging.Page.Kind
  final public let view: UIKit.UIView?
  final public let viewContainsFakeNavigationBar: Swift.Bool
  public init(title: Swift.String, view: UIKit.UIView, viewContainsFakeNavigationBar: Swift.Bool = false, delegate: NoiseTagging.NoiseTagDelegate? = nil)
  final public let settings: [NoiseTagging.Setting]
  public init(title: Swift.String, settings: [NoiseTagging.Setting], delegate: NoiseTagging.NoiseTagDelegate? = nil)
  public func setNoiseTagActionsForSettingViews()
  final public let subPages: [NoiseTagging.Page]?
  public init(title: Swift.String, subPages: [NoiseTagging.Page])
  public var isOpenableFromSuperPage: Swift.Bool
  public var buttonToOpenFromSuperPageWiggles: Swift.Bool
  public var customViewInRow: UIKit.UIView?
  public var extraSpaceBetweenCustomViewInRowAndLabels: CoreGraphics.CGFloat
  final public let noiseTagDelegate: NoiseTagging.NoiseTagDelegate?
  public var titleInList: Swift.String?
  public var subTitle: Swift.String?
  public var leftViewInTitleBar: UIKit.UIView?
  public var rightViewInTitleBar: UIKit.UIView?
  @objc deinit
  @objc override dynamic public init()
}
public enum CornerViewMode : Swift.Int, NoiseTagging.EnumAsSetting {
  case Off
  case Sync
  case Target
  case Custom
  public var displayName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum Layout {
  public static let defaultFontWeightOfControls: UIKit.UIFont.Weight
  public static let defaultCornerRadiusOfControls: CoreGraphics.CGFloat
  public enum Buttons {
    public static let defaultHeight: CoreGraphics.CGFloat
    public static let defaultRatio: CoreGraphics.CGFloat
    public static let defaultWidth: CoreGraphics.CGFloat
    public static let defaultFontSizeTitle: CoreGraphics.CGFloat
    public static let defaultFontTitle: UIKit.UIFont
    public static let defaultFontSubTitle: UIKit.UIFont
  }
  public enum Popovers {
    public static let defaultRatioButtons: CoreGraphics.CGFloat
  }
  public enum Navigator {
    public enum NavigationBar {
      public enum LeftButton {
        public static let frame: CoreGraphics.CGRect
      }
      public static let height: CoreGraphics.CGFloat
    }
    public enum Pages {
      public static let availableSpace: CoreGraphics.CGSize
    }
  }
}
public enum PageAnimationType : Swift.Int {
  case None
  case Left
  case Right
  case FadeIn
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class NavigatorTreeOfPages : ObjectiveC.NSObject, NoiseTagging.NoiseTagDelegate, NoiseTagging.PageDelegate {
  public init(presentingView: UIKit.UIView, initialPage: NoiseTagging.Page)
  public func present()
  public func startNoiseTagControl()
  public var closureToPerformOnClose: (() -> ())? {
    get
    set
  }
  public func push(page: NoiseTagging.Page, completion: (() -> ())? = nil)
  @objc public func pop(completion: (() -> ())? = nil)
  public func reloadPage()
  public func popBackTill(page: NoiseTagging.Page, completion: (() -> ())? = nil)
  public func popAndPush(page: NoiseTagging.Page)
  public func navigateToInitialPage()
  public func pageIsOnStack(page: NoiseTagging.Page) -> Swift.Bool
  public func pageRequestsTitleBarToBe(hidden: Swift.Bool)
  @objc public func startNoiseTagControlOn(noiseTaggingView: UIKit.UIView)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NoiseTagController : ObjectiveC.NSObject, NoiseTagging.SetOfSettingsDelegate {
  public func colorFor(bit: Swift.Bool) -> UIKit.UIColor
  public func updateControls(updateCode: @escaping () -> ())
  public func push(view: UIKit.UIView, forNoiseTaggingWithDelegate delegate: NoiseTagging.NoiseTagDelegate)
  public func pop()
  public func update(view: UIKit.UIView, forNoiseTaggingWithDelegate delegate: NoiseTagging.NoiseTagDelegate)
  public func set(mode: NoiseTagging.NoiseTagMode, waitTillDecoderConfirms: Swift.Bool = false, withExplanation explanationWhileWaiting: Swift.String? = nil)
  public var trialsAreRunning: Swift.Bool {
    get
    set
  }
  public func blockTrials(forDuration duration: Foundation.TimeInterval? = nil)
  public func unblockTrials()
  public var dataCollectionHelper: NoiseTagging.DataCollectionHelperProtocol?
  final public let defaultSetOfSettings: NoiseTagging.NoiseTagSetOfSettings
  final public let settings: NoiseTagging.NoiseTagSetOfSettings
  public func updateSettingsToMatch(newSettings: NoiseTagging.SetOfSettings)
  public func valueChangedOf(setting: NoiseTagging.Setting, inSet setOfSettings: NoiseTagging.SetOfSettings)
  public func enterBrainControlLayerFrom(view: UIKit.UIView, completion: (() -> ())? = nil)
  public func startBrainSetup(pushedFromNavigationController clientNavigationController: UIKit.UINavigationController?, withCompletionAfterBrainSetup completionAfterBrainSetup: @escaping () -> ())
  public func showAlertWith(title: Swift.String, explanation: Swift.String, actions: [NoiseTagging.NoiseTaggingAlertAction], ignoreDuringCalibration: Swift.Bool = false) -> NoiseTagging.ResultOfPresentingAlert
  public var networkCommunicationHasBeenSetUp: Swift.Bool {
    get
  }
  public func sendDecoderALogMessageWith(text: Swift.String)
  @objc deinit
}
public var NoiseTagging: NoiseTagging.NoiseTagController {
  get
}
public protocol CustomVoiceDelegate {
  func say(text: Swift.String, with customVoice: NoiseTagging.VoiceDefinition)
}
@objc @_inheritsConvenienceInitializers public class Sayer : ObjectiveC.NSObject {
  public var settings: NoiseTagging.SetOfSettings?
  public var voiceDefinition: NoiseTagging.VoiceDefinition {
    get
  }
  public var voice: AVFoundation.AVSpeechSynthesisVoice? {
    get
  }
  final public let voiceDeveloper: AVFoundation.AVSpeechSynthesisVoice?
  public var speechRateOnAScaleFrom0To1: Swift.Float {
    get
  }
  public func say(text: Swift.String, useDeveloperVoice: Swift.Bool = false)
  public func add(customVoice: NoiseTagging.VoiceDefinition, withDelegate delegate: NoiseTagging.CustomVoiceDelegate)
  @objc override dynamic public init()
  @objc deinit
}
public let Saying: NoiseTagging.Sayer
@objc @_inheritsConvenienceInitializers open class NoiseTagCheckBoxView : NoiseTagging.NoiseTagLabeledButtonView {
  public var isOn: Swift.Bool {
    get
    set
  }
  public var prefix: Swift.String {
    get
    set
  }
  public var suffix: Swift.String {
    get
    set
  }
  override public init(frame: CoreGraphics.CGRect, locationLabel: NoiseTagging.NoiseTagLabeledButtonView.LocationLabel = super)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ResultValidityCheck : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum StandardCustomizableKeyboardButton : Swift.Int {
  case SpecialCharacters
  case SpeakOutOrUndo
  case Ready
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum CustomizableButtonState : Swift.Equatable {
  case standard(NoiseTagging.StandardCustomizableKeyboardButton)
  case custom(view: UIKit.UIView, idInKeyboard: Swift.String)
  public static func == (lhs: NoiseTagging.CustomizableButtonState, rhs: NoiseTagging.CustomizableButtonState) -> Swift.Bool
}
@objc public protocol NoiseTagKeyboardDelegate : AnyObject {
  @objc optional func customActionOnPressOnKeyWith(idInKeyboard: Swift.String) -> Swift.Bool
  @objc optional func readyButtonPressedInKeyboard()
}
@objc @_hasMissingDesignatedInitializers public class NoiseTagKeyboardViewController : UIKit.UIViewController, NoiseTagging.NoiseTagDelegate, NoiseTagging.SettingSubscriber {
  @objc dynamic public init()
  weak public var delegate: NoiseTagging.NoiseTagKeyboardDelegate?
  public var customizableButtonStates: [NoiseTagging.CustomizableButtonState] {
    get
    set
  }
  public var smartTextEditing: Swift.Bool
  public static let settings: NoiseTagging.SetOfSettingsNoiseTagKeyboard
  public var typedText: Swift.String {
    get
    set
  }
  @objc public func startNoiseTagControlOn(noiseTaggingView: UIKit.UIView)
  @objc public func respondToNoiseTagModeChange()
  @objc public func idsOfControlsToIncludeAsTargetInVerifyMode(noiseTaggingView: UIKit.UIView) -> [Swift.String]?
  public func valueChangedOf(setting: NoiseTagging.Setting, inSet setOfSettings: NoiseTagging.SetOfSettings)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NoiseTagButtonView : UIKit.UIView, NoiseTagging.SettingSubscriber {
  public var titleLabel: UIKit.UILabel?
  public var title: Swift.String? {
    get
    set
  }
  public var subTitle: Swift.String? {
    get
    set
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var imageOffset: UIKit.UIOffset {
    get
    set
  }
  public var fontOfTitle: UIKit.UIFont {
    get
    set
  }
  public var fontOfSubTitle: UIKit.UIFont {
    get
    set
  }
  public var textAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  public var labelColor: UIKit.UIColor? {
    get
    set
  }
  public var titleColor: UIKit.UIColor {
    get
    set
  }
  public var subTitleColor: UIKit.UIColor {
    get
    set
  }
  @objc override dynamic public func show(appearance: NoiseTagging.NoiseTagControlAppearance, withDefaultColor defaultColor: UIKit.UIColor)
  public func valueChangedOf(setting: NoiseTagging.Setting, inSet setOfSettings: NoiseTagging.SetOfSettings)
  @objc dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class DoubleSetting : NoiseTagging.Setting_abstract, NoiseTagging.Setting, Foundation.NSCoding {
  final public let initialValue: Swift.Double
  public var value: Swift.Double {
    get
    set
  }
  public init(title: Swift.String, value: Swift.Double, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var descriptionValueIfDefined: Swift.String {
    @objc get
  }
  @objc public var valueAsJson: Any {
    @objc get
  }
  @objc public func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc public var valueEqualsDefaultValue: Swift.Bool {
    @objc get
  }
  @objc public func resetToDefault()
  @objc public var cellNibName: Swift.String {
    @objc get
  }
  @objc public var cellReuseIdentifier: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol NoiseTagControl : ObjectiveC.NSObjectProtocol {
  @objc func show(appearance: NoiseTagging.NoiseTagControlAppearance, withDefaultColor defaultColor: UIKit.UIColor)
  @objc func setFeedbackColor(color: UIKit.UIColor?)
  @objc func updateUIDependingOnNoiseTagging()
  @objc func layerToHandleNoiseTagTaps() -> QuartzCore.CALayer?
  @objc func layerForFeedbackAnimations() -> QuartzCore.CALayer
  @objc func layerFlickeringPart() -> QuartzCore.CALayer
  @objc var isHiddenOrIsInHiddenView: Swift.Bool { get }
  @objc optional func participatesInFlickering_didChangeValue()
  @objc optional func noiseTagControlIsEnabled_didChangeValue()
}
extension NoiseTagControl {
  public var noiseTagging: NoiseTagging.NoiseTagControlProperties {
    get
  }
  public var defaultColorWhenEnabled: UIKit.UIColor {
    get
  }
  public var defaultColorWhenDisabled: UIKit.UIColor {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class FileOfRecording : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
public struct NoiseTagKeyboardSettingTitles {
  public static let keyboardLayout: Swift.String
  public static let autoCompleteMode: Swift.String
  public static let ttsMode: Swift.String
  public static let languageCodeWordCompletion: Swift.String
  public static let whenAcceptingWordCompletionsOnSpaceOnlySuggestIfCurrentTextIsNoWord: Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetOfSettingsNoiseTagKeyboard : NoiseTagging.SetOfSettings {
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NoiseTagPopupButtonView : NoiseTagging.NoiseTagLabeledButtonView, UIKit.UIPopoverPresentationControllerDelegate, NoiseTagging.NoiseTagDelegate {
  public var items: [NoiseTagging.NoiseTagPopupItem] {
    get
    set
  }
  public var indexSelectedItem: Swift.Int {
    get
    set
  }
  public var isHorizontal: Swift.Bool
  public var noiseTagControlIsOn: Swift.Bool {
    get
    set
  }
  public var closureToHandleSelectionOfItem: ((NoiseTagging.NoiseTagPopupItem) -> Swift.Void)?
  public var fontItems: UIKit.UIFont
  override public var title: Swift.String? {
    get
    set
  }
  override public init(frame: CoreGraphics.CGRect, locationLabel: NoiseTagging.NoiseTagLabeledButtonView.LocationLabel)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func showPopover()
  public func selectItemWithAssociatedValue<T>(value: T) where T : Swift.Equatable
  @objc public func startNoiseTagControlOn(noiseTaggingView: UIKit.UIView)
  @objc public func popoverPresentationControllerShouldDismissPopover(_: UIKit.UIPopoverPresentationController) -> Swift.Bool
  @objc public func popoverPresentationControllerDidDismissPopover(_ popoverPresentationController: UIKit.UIPopoverPresentationController)
  @objc deinit
}
public protocol SetOfSettingsDelegate {
  func valueChangedOf(setting: NoiseTagging.Setting, inSet setOfSettings: NoiseTagging.SetOfSettings)
}
public protocol SettingSubscriber : AnyObject {
  func valueChangedOf(setting: NoiseTagging.Setting, inSet setOfSettings: NoiseTagging.SetOfSettings)
}
@objc @_inheritsConvenienceInitializers open class SetOfSettings : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSCoding, NoiseTagging.SettingObserver {
  @objc override dynamic public init()
  public var delegate: NoiseTagging.SetOfSettingsDelegate?
  public var settings: [NoiseTagging.Setting] {
    get
  }
  public var displayName: Swift.String
  public var nNonDefaultSettings: Swift.Int {
    get
  }
  @objc open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  public func subscribe(_ subscriber: NoiseTagging.SettingSubscriber, toSettingWithTitle settingTitle: Swift.String)
  public func subscribe(_ subscriber: NoiseTagging.SettingSubscriber, toSettingsWithTitles settingTitles: [Swift.String])
  public func add(setting: NoiseTagging.Setting)
  public func insert(setting: NoiseTagging.Setting, at index: Swift.Int)
  public func addByReplace(setting: NoiseTagging.Setting)
  public func addNewGroupWith(title: Swift.String)
  public func deleteSettingAt(index: Swift.Int)
  public func deleteSettingWith(title: Swift.String)
  public func settingWith(title: Swift.String, caseSensitive: Swift.Bool = true) -> NoiseTagging.Setting?
  public func settingsWith(titles: [Swift.String]) -> [NoiseTagging.Setting]
  public func boolFor(_ settingTitle: Swift.String) -> Swift.Bool
  public func set(boolValue: Swift.Bool, for settingTitle: Swift.String)
  public func toggleSettingWith(title: Swift.String)
  public func intFor(_ settingTitle: Swift.String) -> Swift.Int
  public func set(intValue: Swift.Int, for settingTitle: Swift.String)
  public func doubleFor(_ settingTitle: Swift.String) -> Swift.Double
  public func cgFloatFor(_ settingTitle: Swift.String) -> CoreGraphics.CGFloat
  public func set(doubleValue: Swift.Double, for settingTitle: Swift.String)
  public func set(stringValue: Swift.String, for settingTitle: Swift.String)
  public func indexSelectionForEnumSettingWith(title: Swift.String) -> Swift.Int
  public func selectedEnumForSettingWith(title: Swift.String) -> NoiseTagging.EnumAsSetting?
  public func set(enumValue: NoiseTagging.EnumAsSetting, for settingTitle: Swift.String)
  public func indexSelectionForItemOfArraySettingWith(title: Swift.String) -> Swift.Int
  public func selectedItemOfArrayFor(settingTitle: Swift.String) -> NoiseTagging.ItemOfArrayInMenu?
  public func set(itemOfArray: NoiseTagging.ItemOfArrayInMenu, for settingTitle: Swift.String)
  public func colorFor(settingTitle: Swift.String) -> UIKit.UIColor
  public func textFor(settingTitle: Swift.String) -> Swift.String
  public func takeOnValuesOf(settings: NoiseTagging.SetOfSettings)
  public static func changeSettingsWithoutPerformingActions(closure: (() -> ()))
  @objc public func valueChangedFor(setting: NoiseTagging.Setting)
  @objc deinit
}
public enum SpeechRate : Swift.Int, NoiseTagging.EnumAsSetting {
  case VerySlow
  case Slow
  case Normal
  case Fast
  case VeryFast
  public var displayName: Swift.String {
    get
  }
  public var speechRateOnAScaleFrom0to1: Swift.Float {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class Recordingsdatabase : NoiseTagging.SyncableDatabase {
  public var numberOfClosedRecordings: Swift.Int {
    get
  }
  public func closedRecordingAt(index: Swift.Int) -> NoiseTagging.Recording
  public static let kNotificationName_newRecordingStarted: Foundation.NSNotification.Name
  public func recordingContaining(file: NoiseTagging.FileOfRecording) -> NoiseTagging.Recording?
  public func startNewRecording(withComments comments: Swift.String)
  public func append(text: Swift.String, toFileNamed fileName: Swift.String)
  public func append(line: Swift.String, toFileNamed fileName: Swift.String)
  public func append(toCSVNamed fileName: Swift.String, cells: (Swift.String, Swift.CustomStringConvertible)...)
  public func store(image: UIKit.UIImage, underFileName fileName: Swift.String)
  public var folderNameCurrentRecording: Swift.String? {
    get
  }
  @objc deinit
}
public var Recordings: NoiseTagging.Recordingsdatabase {
  get
}
@objc @_hasMissingDesignatedInitializers public class BoolSetting : NoiseTagging.Setting_abstract, NoiseTagging.Setting, Foundation.NSCoding {
  final public let initialValue: Swift.Bool
  public var value: Swift.Bool {
    get
    set
  }
  public init(title: Swift.String, value: Swift.Bool, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var descriptionValueIfDefined: Swift.String {
    @objc get
  }
  @objc public var valueAsJson: Any {
    @objc get
  }
  @objc public func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc public var valueEqualsDefaultValue: Swift.Bool {
    @objc get
  }
  @objc public func resetToDefault()
  @objc public var cellNibName: Swift.String {
    @objc get
  }
  @objc public var cellReuseIdentifier: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol DataCollectionHelperProtocol {
  func shouldProceedWith(trial: Swift.Int) -> Swift.Bool
}
public enum LettersLayoutType : Swift.Int, NoiseTagging.EnumAsSetting {
  case ABC
  case QWERTY
  public var displayName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class TextSetting : NoiseTagging.Setting_abstract, NoiseTagging.Setting, Foundation.NSCoding {
  final public let initialValue: Swift.String
  public var value: Swift.String {
    get
    set
  }
  public init(title: Swift.String, value: Swift.String, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var descriptionValueIfDefined: Swift.String {
    @objc get
  }
  @objc public var valueAsJson: Any {
    @objc get
  }
  @objc public func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc public var valueEqualsDefaultValue: Swift.Bool {
    @objc get
  }
  @objc public func resetToDefault()
  @objc public var cellNibName: Swift.String {
    @objc get
  }
  @objc public var cellReuseIdentifier: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class NoiseTaggingAlertAction : ObjectiveC.NSObject {
  public init(title: Swift.String, closure: (() -> ())? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public enum ClickFeedbackMode : Swift.Int, NoiseTagging.EnumAsSetting {
  case None
  case NonselectedGray
  case SelectedAnimates
  case RedBorder
  public var displayName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol NoiseTagDelegate : AnyObject {
  @objc optional func startNoiseTagControlOn(noiseTaggingView: UIKit.UIView)
  @objc optional func customBackgroundColorFor(noiseTaggingView: UIKit.UIView) -> UIKit.UIColor?
  @objc optional func idsOfControlsToIncludeAsTargetInVerifyMode(noiseTaggingView: UIKit.UIView) -> [Swift.String]?
  @objc optional func respondToNoiseTagModeChange()
  @objc optional func respondToNoClick()
  @objc optional func trialsWillStartRunning()
  @objc optional func trialsStoppedRunning()
  @objc optional func contextDescription() -> Swift.String?
  @objc optional func nextTarget() -> NoiseTagging.NoiseTagControl?
  @objc optional func thereWillBeANextTarget() -> Swift.Bool
  @objc optional func trialEnded()
}
@objc @_hasMissingDesignatedInitializers public class ColorSetting : NoiseTagging.Setting_abstract, NoiseTagging.Setting {
  public var color: UIKit.UIColor {
    get
  }
  public init(title: Swift.String, pickableColors: [NoiseTagging.PickableColor], indexPickedColor: Swift.Int?, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  public init(title: Swift.String, color: UIKit.UIColor, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  public var numberOfPickableColors: Swift.Int {
    get
  }
  public func pickableColorAt(index: Swift.Int) -> NoiseTagging.PickableColor
  public func select(color: UIKit.UIColor)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var descriptionValueIfDefined: Swift.String {
    @objc get
  }
  @objc public func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc public var valueEqualsDefaultValue: Swift.Bool {
    @objc get
  }
  @objc public func resetToDefault()
  @objc public var cellNibName: Swift.String {
    @objc get
  }
  @objc public var cellReuseIdentifier: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol SettingObserver {
  @objc func valueChangedFor(setting: NoiseTagging.Setting)
}
@objc public protocol Setting : Foundation.NSCopying, ObjectiveC.NSObjectProtocol {
  @objc var title: Swift.String { get }
  @objc var isEditable: Swift.Bool { get set }
  @objc var allowsUndefined: Swift.Bool { get set }
  @objc var isVisibleInUI: Swift.Bool { get set }
  @objc var help: Swift.String? { get set }
  @objc var validityCheck: ((Any) -> NoiseTagging.ResultValidityCheck)? { get set }
  @objc var valueEqualsDefaultValue: Swift.Bool { get }
  @objc var valueIsUndefined: Swift.Bool { get set }
  @objc func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc func resetToDefault()
  @objc func setToUndefined()
  @objc var actionBeforeChange: (() -> ())? { get set }
  @objc var actionAfterChange: (() -> ())? { get set }
  @objc var observers: [NoiseTagging.SettingObserver] { get set }
  @objc func add(observer: NoiseTagging.SettingObserver)
  @objc func remove(observer: NoiseTagging.SettingObserver)
  @objc optional var valueAsJson: Any { get }
  @objc var descriptionValueIfDefined: Swift.String { get }
  @objc var descriptionValue: Swift.String { get }
  @objc var cellNibName: Swift.String { get }
  @objc var cellReuseIdentifier: Swift.String { get }
}
@objc @_hasMissingDesignatedInitializers public class Setting_abstract : ObjectiveC.NSObject {
  @objc final public let title: Swift.String
  @objc public var isEditable: Swift.Bool
  @objc public var allowsUndefined: Swift.Bool
  @objc public var isVisibleInUI: Swift.Bool
  @objc public var help: Swift.String?
  @objc public var validityCheck: ((Any) -> NoiseTagging.ResultValidityCheck)?
  @objc public var valueIsUndefined: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func setToUndefined()
  @objc public var actionBeforeChange: (() -> ())?
  @objc public var actionAfterChange: (() -> ())?
  @objc public var observers: [NoiseTagging.SettingObserver]
  @objc public func add(observer: NoiseTagging.SettingObserver)
  @objc public func remove(observer: NoiseTagging.SettingObserver)
  @objc public var descriptionValue: Swift.String {
    @objc get
  }
  public func encode(with aCoder: Foundation.NSCoder)
  public func decode(with aDecoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
public enum ResultOfPresentingAlert {
  case Shown(Swift.Int)
  case NotShownBecauseWeAreInCalibration
  case NotShownBecauseNoViewToPresentFromAvailable
}
public enum ContrastMode : Swift.Int, NoiseTagging.EnumAsSetting {
  case Min
  case Low
  case Medium
  case High
  case Max
  public static var possibleValues: [NoiseTagging.ContrastMode]
  public static func indexOf(mode: NoiseTagging.ContrastMode) -> Swift.Int?
  public var colorBitOn: UIKit.UIColor {
    get
  }
  public var colorBitOff: UIKit.UIColor {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class EnumSetting : NoiseTagging.Setting_abstract, NoiseTagging.Setting {
  final public let initialValue: NoiseTagging.EnumAsSetting
  public var value: NoiseTagging.EnumAsSetting {
    get
    set
  }
  public init(title: Swift.String, value: NoiseTagging.EnumAsSetting, usePickerInsteadOfSegmentedControl: Swift.Bool = false, isEditable: Swift.Bool = true, help: Swift.String? = nil)
  public var caseCount: Swift.Int {
    get
  }
  public func valueAt(index: Swift.Int) -> NoiseTagging.EnumAsSetting?
  public func displayNameAt(index: Swift.Int) -> Swift.String
  public func setValueWith(rawValue: Swift.Int)
  public func selectValueWith(displayName: Swift.String) -> Swift.Bool
  public var indexOfValue: Swift.Int {
    get
  }
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var descriptionValueIfDefined: Swift.String {
    @objc get
  }
  @objc public func updateValueToMatch(newSetting: NoiseTagging.Setting)
  @objc public var valueEqualsDefaultValue: Swift.Bool {
    @objc get
  }
  @objc public func resetToDefault()
  @objc public var cellNibName: Swift.String {
    @objc get
  }
  @objc public var cellReuseIdentifier: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol EnumAsSetting {
  static var caseCount: Swift.Int { get }
  static func valueAt(index: Swift.Int) -> Self?
  var displayName: Swift.String { get }
  var subTitle: Swift.String? { get }
  static func displayNameAt(index: Swift.Int) -> Swift.String
  var rawValue: Swift.Int { get }
}
extension RawRepresentable where Self.RawValue == Swift.Int {
  public static var caseCount: Swift.Int {
    get
  }
  public static func valueAt(index: Swift.Int) -> Self?
}
extension EnumAsSetting {
  public static func displayNameAt(index: Swift.Int) -> Swift.String
  public var subTitle: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class NoiseTagLabeledButtonView : UIKit.UIView {
  public enum LocationLabel : Swift.Int {
    case Right
    case Top
    case Bottom
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override convenience dynamic public init(frame: CoreGraphics.CGRect)
  public init(frame: CoreGraphics.CGRect, locationLabel: NoiseTagging.NoiseTagLabeledButtonView.LocationLabel = .Right)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var title: Swift.String? {
    get
    set
  }
  public var subTitle: Swift.String? {
    get
    set
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var font: UIKit.UIFont {
    get
    set
  }
  public var textAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @objc override dynamic public func show(appearance: NoiseTagging.NoiseTagControlAppearance, withDefaultColor defaultColor: UIKit.UIColor)
  @objc override dynamic public func updateUIDependingOnNoiseTagging()
  @objc deinit
}
@objc open class PickableColor : ObjectiveC.NSObject {
  final public let displayName: Swift.String
  final public let color: UIKit.UIColor
  public init(displayName: Swift.String, color: UIKit.UIColor)
  public init(displayName: Swift.String, r255: CoreGraphics.CGFloat, g255: CoreGraphics.CGFloat, b255: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Recording : ObjectiveC.NSObject {
  public var commentsOnStartOfRecording: Swift.String {
    get
  }
  public var commentsOnEndOfRecording: Swift.String {
    get
  }
  public var dateStart: Foundation.Date {
    get
  }
  public var dateEnd: Foundation.Date? {
    get
  }
  public var titleToShowUser: Swift.String {
    get
  }
  public static var recordType: Swift.String {
    get
  }
  final public let recordName: Swift.String
  public var creationDateICloud: Foundation.Date?
  public var syncableFields: [Swift.String : CloudKit.CKRecordValueProtocol] {
    get
  }
  required public init?(cloudKitRecord: CloudKit.CKRecord)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NoiseTagControlProperties : ObjectiveC.NSObject {
  public func addAction(timing: Swift.Double, closure: @escaping (() -> ()))
  public var identifier: Swift.String?
  public var customUtopiaObjectID: Swift.Int?
  public var participatesInFlickering: Swift.Bool {
    get
    set
  }
  public var enabled: Swift.Bool {
    get
    set
  }
  public var playClickSoundOnPress: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc open class VoiceDefinition : ObjectiveC.NSObject, NoiseTagging.ItemOfArrayInMenu {
  public var languageIdentifier: Swift.String
  public var displayName: Swift.String
  public var exampleSentence: Swift.String?
  public init(languageIdentifier: Swift.String, userDescription: Swift.String? = nil, exampleSentence: Swift.String? = nil)
  public static var availableVoices: [NoiseTagging.VoiceDefinition] {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public class NoiseTagShapeButtonView : NoiseTagging.NoiseTagButtonView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var path: CoreGraphics.CGPath? {
    get
    set
  }
  public var color: UIKit.UIColor? {
    get
    set
  }
  @objc override dynamic public func layerToHandleNoiseTagTaps() -> QuartzCore.CALayer?
  @objc override dynamic public func show(appearance: NoiseTagging.NoiseTagControlAppearance, withDefaultColor defaultColor: UIKit.UIColor)
  @objc override dynamic public func noiseTagControlIsEnabled_didChangeValue()
  @objc deinit
  @objc override dynamic public init()
}
extension NoiseTagging.NoiseTagMode : Swift.Equatable {}
extension NoiseTagging.NoiseTagMode : Swift.Hashable {}
extension NoiseTagging.NoiseTagMode : Swift.RawRepresentable {}
extension NoiseTagging.NoiseTagControlAppearance : Swift.Equatable {}
extension NoiseTagging.NoiseTagControlAppearance : Swift.Hashable {}
extension NoiseTagging.NoiseTagControlAppearance : Swift.RawRepresentable {}
extension NoiseTagging.Page.Kind : Swift.Equatable {}
extension NoiseTagging.Page.Kind : Swift.Hashable {}
extension NoiseTagging.CornerViewMode : Swift.Equatable {}
extension NoiseTagging.CornerViewMode : Swift.Hashable {}
extension NoiseTagging.CornerViewMode : Swift.RawRepresentable {}
extension NoiseTagging.PageAnimationType : Swift.Equatable {}
extension NoiseTagging.PageAnimationType : Swift.Hashable {}
extension NoiseTagging.PageAnimationType : Swift.RawRepresentable {}
extension NoiseTagging.StandardCustomizableKeyboardButton : Swift.Equatable {}
extension NoiseTagging.StandardCustomizableKeyboardButton : Swift.Hashable {}
extension NoiseTagging.StandardCustomizableKeyboardButton : Swift.RawRepresentable {}
extension NoiseTagging.SpeechRate : Swift.Equatable {}
extension NoiseTagging.SpeechRate : Swift.Hashable {}
extension NoiseTagging.SpeechRate : Swift.RawRepresentable {}
extension NoiseTagging.LettersLayoutType : Swift.Equatable {}
extension NoiseTagging.LettersLayoutType : Swift.Hashable {}
extension NoiseTagging.LettersLayoutType : Swift.RawRepresentable {}
extension NoiseTagging.ClickFeedbackMode : Swift.Equatable {}
extension NoiseTagging.ClickFeedbackMode : Swift.Hashable {}
extension NoiseTagging.ClickFeedbackMode : Swift.RawRepresentable {}
extension NoiseTagging.ContrastMode : Swift.Equatable {}
extension NoiseTagging.ContrastMode : Swift.Hashable {}
extension NoiseTagging.ContrastMode : Swift.RawRepresentable {}
extension NoiseTagging.NoiseTagLabeledButtonView.LocationLabel : Swift.Equatable {}
extension NoiseTagging.NoiseTagLabeledButtonView.LocationLabel : Swift.Hashable {}
extension NoiseTagging.NoiseTagLabeledButtonView.LocationLabel : Swift.RawRepresentable {}
extension NoiseTagging.Recording : Foundation.NSCoding {}
