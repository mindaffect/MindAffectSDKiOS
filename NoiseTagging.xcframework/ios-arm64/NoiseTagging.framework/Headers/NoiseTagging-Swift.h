// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NoiseTagging",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol SettingDelegate;
@class ResultValidityCheck;

SWIFT_PROTOCOL("_TtP12NoiseTagging7Setting_")
@protocol Setting <NSCopying, NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic) BOOL isEditable;
@property (nonatomic) BOOL isVisibleInUI;
@property (nonatomic, copy) NSString * _Nullable help;
@property (nonatomic, copy) NSArray<id <SettingDelegate>> * _Nonnull observers;
- (void)addWithObserver:(id <SettingDelegate> _Nonnull)observer;
- (void)removeWithObserver:(id <SettingDelegate> _Nonnull)observer;
@optional
@property (nonatomic, readonly) id _Nonnull valueAsJson;
@required
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValue;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@property (nonatomic, copy) ResultValidityCheck * _Nonnull (^ _Nullable validityCheck)(id _Nonnull);
@property (nonatomic, copy) void (^ _Nullable actionBeforeChange)(void);
@property (nonatomic, copy) void (^ _Nullable actionAfterChange)(void);
@property (nonatomic) BOOL allowsUndefined;
@property (nonatomic) BOOL isUndefined;
- (void)setToUndefined;
@end


SWIFT_CLASS("_TtC12NoiseTagging16Setting_abstract")
@interface Setting_abstract : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic) BOOL isEditable;
@property (nonatomic) BOOL isVisibleInUI;
@property (nonatomic, copy) NSString * _Nullable help;
@property (nonatomic, copy) NSArray<id <SettingDelegate>> * _Nonnull observers;
@property (nonatomic, copy) ResultValidityCheck * _Nonnull (^ _Nullable validityCheck)(id _Nonnull);
@property (nonatomic, copy) void (^ _Nullable actionBeforeChange)(void);
@property (nonatomic, copy) void (^ _Nullable actionAfterChange)(void);
@property (nonatomic) BOOL allowsUndefined;
@property (nonatomic) BOOL isUndefined;
- (void)setToUndefined;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValue;
- (void)addWithObserver:(id <SettingDelegate> _Nonnull)observer;
- (void)removeWithObserver:(id <SettingDelegate> _Nonnull)observer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;

SWIFT_CLASS("_TtC12NoiseTagging11BoolSetting")
@interface BoolSetting : Setting_abstract <NSCoding, Setting>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
@property (nonatomic, readonly) id _Nonnull valueAsJson;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@end




SWIFT_CLASS("_TtC12NoiseTagging12ColorSetting")
@interface ColorSetting : Setting_abstract <Setting>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@end


SWIFT_CLASS("_TtC12NoiseTagging13DoubleSetting")
@interface DoubleSetting : Setting_abstract <NSCoding, Setting>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
@property (nonatomic, readonly) id _Nonnull valueAsJson;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@end


SWIFT_CLASS("_TtC12NoiseTagging11EnumSetting")
@interface EnumSetting : Setting_abstract <Setting>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@end


SWIFT_CLASS("_TtC12NoiseTagging10IntSetting")
@interface IntSetting : Setting_abstract <NSCoding, Setting>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
@property (nonatomic, readonly) id _Nonnull valueAsJson;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@end


SWIFT_CLASS("_TtC12NoiseTagging18ItemOfArraySetting")
@interface ItemOfArraySetting : Setting_abstract <Setting>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@end



@class UIColor;

SWIFT_CLASS("_TtC12NoiseTagging18NoiseTagButtonView")
@interface NoiseTagButtonView : UIView
- (void)setFlickerColorWithColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12NoiseTagging25NoiseTagLabeledButtonView")
@interface NoiseTagLabeledButtonView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setFlickerColorWithColor:(UIColor * _Nonnull)color;
- (void)updateUIDependingOnNoiseTagging;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12NoiseTagging20NoiseTagCheckBoxView")
@interface NoiseTagCheckBoxView : NoiseTagLabeledButtonView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12NoiseTagging15NoiseTagControl_")
@protocol NoiseTagControl <NSObject>
- (void)setFlickerColorWithColor:(UIColor * _Nonnull)color;
- (void)setFeedbackColorWithColor:(UIColor * _Nullable)color;
- (CALayer * _Nullable)layerToHandleNoiseTagTaps SWIFT_WARN_UNUSED_RESULT;
- (CALayer * _Nonnull)layerToAnimateForfeedbackOnTouchPress SWIFT_WARN_UNUSED_RESULT;
- (CALayer * _Nonnull)layerFlickeringPart SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isHiddenOrIsInHiddenView;
- (void)updateUIDependingOnNoiseTagging;
@optional
- (void)participatesInFlickering_didChangeValue;
- (void)noiseTagControlIsEnabled_didChangeValue;
@end


SWIFT_CLASS("_TtC12NoiseTagging25NoiseTagControlProperties")
@interface NoiseTagControlProperties : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides a singleton <code>NoiseTagController</code>, which is responsible for coordinating everything that has to do with noise tagging. Access the singleton instance using the convenience variable <code>NoiseTagging</code>.
SWIFT_CLASS("_TtC12NoiseTagging18NoiseTagController")
@interface NoiseTagController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface NoiseTagController (SWIFT_EXTENSION(NoiseTagging))
+ (NSInteger)nFramesPerBit SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP12NoiseTagging16NoiseTagDelegate_")
@protocol NoiseTagDelegate
- (void)startNoiseTagControlOnNoiseTaggingView:(UIView * _Nonnull)noiseTaggingView;
@optional
- (void)respondToNoiseTagModeChange;
- (NSNumber * _Nullable)overridingNoiseTag SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)contextDescription SWIFT_WARN_UNUSED_RESULT;
- (void)respondToNoClick;
- (NSNumber * _Nullable)preparePlay SWIFT_WARN_UNUSED_RESULT;
/// Optionally define an alternative background color for the view. By default the color is defined by <code>NoiseTagController</code>’s <code>defaultBackgroundColorPrimary</code> setting.
- (UIColor * _Nullable)customBackgroundColorForView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (NSArray<CALayer *> * _Nonnull)activeLayers SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)idsOfControlsToIncludeAsTargetInVerifyModeWithNoiseTaggingView:(UIView * _Nonnull)noiseTaggingView SWIFT_WARN_UNUSED_RESULT;
- (id <NoiseTagControl> _Nullable)nextTarget SWIFT_WARN_UNUSED_RESULT;
- (void)trialEnded;
@end


@class UIPopoverPresentationController;

SWIFT_CLASS("_TtC12NoiseTagging23NoiseTagPopupButtonView")
@interface NoiseTagPopupButtonView : NoiseTagLabeledButtonView <NoiseTagDelegate, UIPopoverPresentationControllerDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)startNoiseTagControlOnNoiseTaggingView:(UIView * _Nonnull)noiseTaggingView;
- (BOOL)popoverPresentationControllerShouldDismissPopover:(UIPopoverPresentationController * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (void)popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
@end


SWIFT_CLASS("_TtC12NoiseTagging17NoiseTagPopupItem")
@interface NoiseTagPopupItem : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12NoiseTagging19NoiseTagRadioButton")
@interface NoiseTagRadioButton : NoiseTagLabeledButtonView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12NoiseTagging15SettingDelegate_")
@protocol SettingDelegate
- (void)valueChangedForSetting:(id <Setting> _Nonnull)setting;
@end


SWIFT_CLASS("_TtC12NoiseTagging13SetOfSettings")
@interface SetOfSettings : NSObject <NSCoding, NSCopying, SettingDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)valueChangedForSetting:(id <Setting> _Nonnull)setting;
@end


/// Used for modeling NoiseTagController’s settings. Note that this class does <em>not</em> control which specific settings are added to it. To get an overview of the settings that NoiseTagController uses, see <code>NoiseTagSettingTitles</code>.
SWIFT_CLASS("_TtC12NoiseTagging21NoiseTagSetOfSettings")
@interface NoiseTagSetOfSettings : SetOfSettings
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12NoiseTagging23NoiseTagShapeButtonView")
@interface NoiseTagShapeButtonView : NoiseTagButtonView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CALayer * _Nullable)layerToHandleNoiseTagTaps SWIFT_WARN_UNUSED_RESULT;
- (void)setFlickerColorWithColor:(UIColor * _Nonnull)color;
- (void)noiseTagControlIsEnabled_didChangeValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12NoiseTagging13PickableColor")
@interface PickableColor : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12NoiseTagging19ResultValidityCheck")
@interface ResultValidityCheck : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_CLASS("_TtC12NoiseTagging11TextSetting")
@interface TextSetting : Setting_abstract <NSCoding, Setting>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull descriptionValueIfDefined;
@property (nonatomic, readonly) id _Nonnull valueAsJson;
- (void)updateValueToMatchWithNewSetting:(id <Setting> _Nonnull)newSetting;
@property (nonatomic, readonly) BOOL hasDefaultValue;
- (void)resetToDefault;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellNibName;
@property (nonatomic, readonly, copy) NSString * _Nonnull cellReuseIdentifier;
@end










@interface UIView (SWIFT_EXTENSION(NoiseTagging)) <NoiseTagControl>
@property (nonatomic, readonly) BOOL isHiddenOrIsInHiddenView;
- (void)setFlickerColorWithColor:(UIColor * _Nonnull)color;
- (void)setFeedbackColorWithColor:(UIColor * _Nullable)color;
- (CALayer * _Nullable)layerToHandleNoiseTagTaps SWIFT_WARN_UNUSED_RESULT;
- (CALayer * _Nonnull)layerFlickeringPart SWIFT_WARN_UNUSED_RESULT;
- (CALayer * _Nonnull)layerToAnimateForfeedbackOnTouchPress SWIFT_WARN_UNUSED_RESULT;
- (void)updateUIDependingOnNoiseTagging;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
